// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// GNU C Library
class DynamicGnuCLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  DynamicGnuCLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  DynamicGnuCLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Int32> errno() {
    return _errno();
  }

  late final _errnoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          '__errno_location');
  late final _errno = _errnoPtr.asFunction<ffi.Pointer<ffi.Int32> Function()>();

  ffi.Pointer<ffi.Int8> getenv(
    ffi.Pointer<ffi.Int8> __name,
  ) {
    return _getenv(
      __name,
    );
  }

  late final _getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('getenv');
  late final _getenv = _getenvPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int putenv(
    ffi.Pointer<ffi.Int8> __string,
  ) {
    return _putenv(
      __string,
    );
  }

  late final _putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'putenv');
  late final _putenv =
      _putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int setenv(
    ffi.Pointer<ffi.Int8> __name,
    ffi.Pointer<ffi.Int8> __value,
    int __replace,
  ) {
    return _setenv(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('setenv');
  late final _setenv = _setenvPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> strerror(
    int __errnum,
  ) {
    return _strerror(
      __errnum,
    );
  }

  late final _strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'strerror');
  late final _strerror =
      _strerrorPtr.asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  int sysinfo(
    ffi.Pointer<sysinfo_t> __info,
  ) {
    return _sysinfo(
      __info,
    );
  }

  late final _sysinfoPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<sysinfo_t>)>>(
          'sysinfo');
  late final _sysinfo =
      _sysinfoPtr.asFunction<int Function(ffi.Pointer<sysinfo_t>)>();

  int uname(
    ffi.Pointer<utsname_t> __name,
  ) {
    return _uname(
      __name,
    );
  }

  late final _unamePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<utsname_t>)>>(
          'uname');
  late final _uname =
      _unamePtr.asFunction<int Function(ffi.Pointer<utsname_t>)>();

  int unsetenv(
    ffi.Pointer<ffi.Int8> __name,
  ) {
    return _unsetenv(
      __name,
    );
  }

  late final _unsetenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'unsetenv');
  late final _unsetenv =
      _unsetenvPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();
}

const int UTSNAME_DOMAIN_LENGTH = 65;

const int UTSNAME_LENGTH = 65;

const int UTSNAME_MACHINE_LENGTH = 65;

const int UTSNAME_NODENAME_LENGTH = 65;

const int UTSNAME_RELEASE_LENGTH = 65;

const int UTSNAME_SYSNAME_LENGTH = 65;

const int UTSNAME_VERSION_LENGTH = 65;

class sysinfo_t extends ffi.Struct {
  @ffi.Int64()
  external int uptime;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint64> loads;

  @ffi.Uint64()
  external int totalram;

  @ffi.Uint64()
  external int freeram;

  @ffi.Uint64()
  external int sharedram;

  @ffi.Uint64()
  external int bufferram;

  @ffi.Uint64()
  external int totalswap;

  @ffi.Uint64()
  external int freeswap;

  @ffi.Uint16()
  external int procs;

  @ffi.Uint16()
  external int pad;

  @ffi.Uint64()
  external int totalhigh;

  @ffi.Uint64()
  external int freehigh;

  @ffi.Uint32()
  external int mem_unit;

  @ffi.Array.multi([0])
  external ffi.Array<ffi.Int8> _f;
}

class utsname_t extends ffi.Struct {
  @ffi.Array.multi([65])
  external ffi.Array<ffi.Int8> sysname;

  @ffi.Array.multi([65])
  external ffi.Array<ffi.Int8> nodename;

  @ffi.Array.multi([65])
  external ffi.Array<ffi.Int8> release;

  @ffi.Array.multi([65])
  external ffi.Array<ffi.Int8> version;

  @ffi.Array.multi([65])
  external ffi.Array<ffi.Int8> machine;

  @ffi.Array.multi([65])
  external ffi.Array<ffi.Int8> __domainname;
}
